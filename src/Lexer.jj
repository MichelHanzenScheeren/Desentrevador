/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options { static = true; }PARSER_BEGIN(Lexer)
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileInputStream;
import java.util.Scanner;

public class Lexer {
	public static void execute(Lexer analisador) throws ParseException {
		analisador.main();
		System.out.println("\n--------------------");
	    System.out.println("Tudo ok! BOAAAA POHA");
	    System.out.println("--------------------");
	}
  
	public static void main(String[] args) {
        try {
          	if(args.length == 0) {
    		  System.out.println("\nInforme seu código: ");
    		  execute(new Lexer(System.in));
    		} else if(args[0].contains("\\")) {
    			FileInputStream stream = new FileInputStream(args[0]);
	          	execute(new Lexer(stream));
    		} else {
    		  	System.out.println("\nSelecione o arquivo do programa: ");
    		 	JFileChooser arquivo = new JFileChooser();
	          	arquivo.showOpenDialog(null);
	          	File selected = arquivo.getSelectedFile();
	          	if(selected != null) {
	          	 	FileInputStream stream = new FileInputStream(selected.getAbsolutePath());
	          	 	execute(new Lexer(stream));
	         	} else {
	         	  System.out.println("\n\n------------------------------------");
	         	  System.out.println("Processo cancelado pelo usuário!");
	         	  System.out.println("--------------------------------");
	         	  return;
	        	}
    		}
        } catch (Throwable e) {
            System.out.println("Programa inválido!\n " + e.getMessage());
        }
    }
}

PARSER_END(Lexer)SKIP :{  " "| "\r"| "\t"}TOKEN: /* OPERADORES */ // TODO VALIDAR SIMBOLOS{   < MAIS: "+" >
| < MENOS: "-" >
| < VEZES: "*" >
| < DIVIDIDO: "/" >
| < ELEVADO: "^" >
| < ATRIBUICAO: "=" >
| < COMPARACAO: "==" >
| < MAIOR: ">" >
| < MENOR: "< " >
| < MAIOR_IGUAL: ">=" >
| < MENOR_IGUAL: "<=" >
| < OU: "ou" >
| < E: "e" >}TOKEN: /* PALAVRAS RESERVADAS */{
  < FIM_PROGRAMA: "pareHome" >
| < FIM_LINHA: "/n" >
| < INICIO_BLOCO: "tche" >
| < FIM_BLOCO: "bah" >
| < OPERACAO_DE_LINHA: "dai" >
| < DEFINICAO_DE_FUNCAO: "funcao" >
| < ABRE_PARENTESE: "(" >
| < FECHA_PARENTESE: ")" >
| < LOQUEANDO: "loqueando" > // WHILE
| < REPETECO: "repeteco" > // FOR
| < MIN_REPETECO: "de" >
| < MAX_REPETECO: "ate" >}

TOKEN: /* TIPOS DE DADOS */
{
  < REDONDO: "redondo" > // INTEIRO
| < QUEBRADO: "quebrado" > // FLOAT
| < TROVA: "trova" > // STRING
| < LOGICO: "logico" > // BOOL
| < VAZIO: "vazio" > // VOID
}

TOKEN: /* FORMALIZAÇÃO DE DADOS */
{
  < VALOR_BOOLEANO: "causo" | "anedota" > // VERDADEIRO E FALSO
| < NOME_VARIAVEL: (<MINUSCULAS> | "_") (<LETRA> | <DIGITO> | "_")* >
| < NOME_FUNCAO: <MAIUSCULAS> (<LETRA> | <DIGITO> | "_")* >
| < #LETRA: [ "A" - "Z", "a" - "z" ] > // "PRIVADO"
| < #MINUSCULAS: [ "a" - "z" ] >  // "PRIVADO"
| < #MAIUSCULAS: [ "A" - "Z" ] >  // "PRIVADO"
| < NUMERO: (< DIGITO >)+("."(< DIGITO >)+)? >
| < #DIGITO: [ "0" - "9" ] >  // "PRIVADO"
| < TEXTO: ("\"" ((~["\"","\\","\n","\r"]) | < ASCII >)* "\"") | ("'" ((~["'","\\","\n","\r"]) | < ASCII >)* "'") > 
| < #ASCII: ("\\" ( ["n","t","b","r","f","\\","'","\""] | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) >  // "PRIVADO"
}void main():{}{  fimDePrograma()}

void fimDePrograma():
{}
{ < EOF > | < FIM_PROGRAMA > }
