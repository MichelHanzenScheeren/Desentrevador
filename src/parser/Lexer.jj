/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Lexer.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options { static = true; }

PARSER_BEGIN(Lexer)

package parser;

import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileInputStream;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Scanner;
import recovery.*;

public class Lexer/*@bgen(jjtree)*/implements LexerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTLexerState jjtree = new JJTLexerState();

/*@egen*/
  public static boolean errorJumpLine = true;
  public static boolean panicMessages = false;
  public static boolean tree = false;
  public static int errorsCount = 0;

  public static void execute(Lexer analisador) throws ParseException {
    SimpleNode node = analisador.main();
    if(tree) {
      node.dump(" ");
    } else {
      if(errorsCount == 0) {
        System.out.println("--------------------------------------");
        System.out.println("Mas ah indio veio, que escrita bagual!");
        System.out.println("--------------------------------------");
      } else {
        System.out.println("---------------------------------------");
        System.out.println("Corrige essa porqueira ai piazao burro!");
        System.out.println("---------------------------------------");
      }
    }
  }

  public static String getPathFromSelectedFile() throws Throwable {
    System.out.println(">> Tu trata de pega o arquivo ai entao:");
    JFileChooser arquivo = new JFileChooser();
    arquivo.showOpenDialog(null);
    File selected = arquivo.getSelectedFile();
    if(selected == null) throw new Throwable("O tongo veio, cancelou o negocio!");
    return selected.getAbsolutePath();
  }

  public static void extensionCheck(String file) throws Throwable {
    String extension = "";
    int i = file.lastIndexOf('.');
    if (i >= 0) { extension = file.substring(i+1); }
    if(!extension.equals("entrevero"))
    throw new Throwable("Meu favor, nao sabe nem a extensao, bixo buro! Mah use um aquivo \".entrevero\".");
  }

  public static void main(String[] args) {
    try {
      if(args.length == 0) {
        panicMessages = true;
        System.out.println(">> Bota teu codigo ai guri:");
        execute(new Lexer(System.in));
      } else {
		String path = new String();

        if(args[0].contains("t")) {
          tree = true;
        }

        if(args[0].contains("v")) {
          panicMessages = true;
        }

        if(args[0].contains("f")) {

          path = getPathFromSelectedFile();

        } else if(args[0].contains("p")) {
          errorJumpLine = false;
          path = args[1];
        }

        extensionCheck(path);
        execute(new Lexer(new FileInputStream(path)));
      }
    } catch (Throwable e) {
      if(errorJumpLine) System.out.println("");
      System.out.println("DEU RUIM PIA!");
      System.out.println(e.getMessage());
    }
  }

  static public String im(int x) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    } catch (StringIndexOutOfBoundsException e) {}
    return s;
  }

  static Token lastError = null;
  static boolean eof;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado

  // o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  // de sincroniza\u00e7\u00e3o
  static void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseException {
    Token tok;
    if(panicMessages) {
      System.out.println();
      System.out.println("*** " + met + " ***");
      System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
    }
    if(g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o
      tok = getToken(1);                  // pega token corrente
    while(!eof) {                       // se n\u00e3o chegou ao fim do arquivo
      if(g.contains(tok.kind)) {        // achou um token no conjunto
        if(panicMessages) {
          System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " + im(tok.kind));
        }
        break;
      }
      if(panicMessages) {
        System.out.println("     Ignorando o token: " + im(tok.kind));
      }
      getNextToken();                   // pega pr\u00f3ximo token
      tok = getToken(1);
      if(tok.kind == EOF && !g.contains(EOF)) // fim da entrada?
          eof = true;
    }
    if(tok != lastError) {
      if(panicMessages) {
        System.out.println(e.getMessage());
      }
      
      lastError = tok;
      errorsCount += 1;
    }
    if(eof)
      throw new RuntimeException("Encontrei EOF onde n\u00e3o deveria.");
  }
}

PARSER_END(Lexer)

SKIP :
{
  " "
| "\r"
| "\t"
}

/* PARA IGNORAR OS COMENTARIOS */
MORE: {"/*" : IN_MULTI_LINE_COMMENT }
<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN: { <MULTI_LINE_COMMENT: "*/" >: DEFAULT }
<IN_MULTI_LINE_COMMENT> MORE : { < ~[] > }

TOKEN: /* OPERADORES */
{
  < MAIS: "+" >
| < MENOS: "-" >
| < VEZES: "*" >
| < DIVIDIDO: "/" >
| < ELEVADO: "^" >
| < RESTO: "%" >
| < ATRIBUICAO: "=" >
| < IGUAL: "==" >
| < DIFERENTE: "!=" >
| < MAIOR: ">" >
| < MENOR: "<" >
| < MAIOR_IGUAL: ">=" >
| < MENOR_IGUAL: "<=" >
| < OU: "ou" >
| < E: "e" >
| < NEGACAO: "!" >
}

TOKEN: /* PALAVRAS RESERVADAS */
{
  < PARE_HOME: "pareHome" >
| < TCHE: "tche" > // ABERTURA DE BLOCO
| < BAH: "bah" > // FECHAMENTO DE BLOCO
| < DAI: "dai" > // OPERACAO DE LINHA
| < FUNCAO: "funcao" >
| < DEVOLTA: "devolta" >
| < LOQUEANDO: "loqueando" > // WHILE
| < REPETECO: "repeteco" > // FOR
| < DE: "de" >
| < ATE: "ate" >
| < SE: "se" >
| < SENAO: "senao" >
| < TROVAR: "Trovar"> // METODO DE ESCRITA
| < ESCUITAR: "Escuitar" > // METODO DE LEITURA
}

TOKEN: /* SIMBOLOS */
{
  < FIM_LINHA: "\n" >
| < VIRGULA: "," >
| < ABRE_PARENTESE: "(" >
| < FECHA_PARENTESE: ")" >
}

TOKEN: /* TIPOS DE DADOS */
{
  < REDONDO: "redondo" > // INTEIRO
| < QUEBRADO: "quebrado" > // FLOAT
| < TROVA: "trova" > // STRING
| < LOGICO: "logico" > // BOOL
| < VAZIO: "vazio" > // VOID
}

TOKEN: /* IDENTIFICADORES */
{
  < BOOLEANO: "causo" | "anedota" > // VERDADEIRO E FALSO
| < NOME_VARIAVEL: (<MINUSCULAS> | "_") (<LETRA> | <DIGITO> | "_")* >
| < NOME_FUNCAO: <MAIUSCULAS> (<LETRA> | <DIGITO> | "_")* >
| < #LETRA: [ "A" - "Z", "a" - "z" ] >
| < #MINUSCULAS: [ "a" - "z" ] >
| < #MAIUSCULAS: [ "A" - "Z" ] >
| < NUMERO: (< DIGITO >)+("."(< DIGITO >)+)? >
| < #DIGITO: [ "0" - "9" ] >
| < TEXTO: ("\"" (~["\n", "\r", "\""])* "\"") | ("'" (~["\n", "\r", "'"])* "'") >
}

/* INICIO DO CODIGO RELACIONADO A ANALISE SINTATICA */
SimpleNode main():
{/*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.main; }
{/*@bgen(jjtree) main */
  try {
/*@egen*/
  try {
    (linha() | bloco())*
    (pareHome() | fimDeArquivo())
    { return jjtn000; }
  } catch (ParseException e) {
    consumeUntil(recovery, e, "main");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/* OPERADORES */
void mais():
{/*@bgen(jjtree) mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mais */
  try {
/*@egen*/ < MAIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void menos():
{/*@bgen(jjtree) menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menos */
  try {
/*@egen*/ < MENOS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void vezes():
{/*@bgen(jjtree) vezes */
  SimpleNode jjtn000 = new SimpleNode(JJTVEZES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) vezes */
  try {
/*@egen*/ < VEZES >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void dividido():
{/*@bgen(jjtree) dividido */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dividido */
  try {
/*@egen*/ < DIVIDIDO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void elevado():
{/*@bgen(jjtree) elevado */
  SimpleNode jjtn000 = new SimpleNode(JJTELEVADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) elevado */
  try {
/*@egen*/ < ELEVADO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void resto():
{/*@bgen(jjtree) resto */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) resto */
  try {
/*@egen*/ < RESTO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void maior():
{/*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) maior */
  try {
/*@egen*/ < MAIOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void menor():
{/*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menor */
  try {
/*@egen*/ < MENOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void maiorIgual():
{/*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) maiorIgual */
  try {
/*@egen*/ < MAIOR_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void menorIgual():
{/*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menorIgual */
  try {
/*@egen*/ < MENOR_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void igual():
{/*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) igual */
  try {
/*@egen*/ < IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void diferente():
{/*@bgen(jjtree) diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) diferente */
  try {
/*@egen*/ < DIFERENTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void ou():
{/*@bgen(jjtree) ou */
  SimpleNode jjtn000 = new SimpleNode(JJTOU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ou */
  try {
/*@egen*/ < OU >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void e():
{/*@bgen(jjtree) e */
  SimpleNode jjtn000 = new SimpleNode(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) e */
  try {
/*@egen*/ < E >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void negacao():
{/*@bgen(jjtree) negacao */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) negacao */
  try {
/*@egen*/ < NEGACAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


/* PALAVRAS RESERVADAS */
void loqueando():
{/*@bgen(jjtree) loqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) loqueando */
  try {
/*@egen*/ < LOQUEANDO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void repeteco():
{/*@bgen(jjtree) repeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repeteco */
  try {
/*@egen*/ < REPETECO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void tche():
{/*@bgen(jjtree) tche */
  SimpleNode jjtn000 = new SimpleNode(JJTTCHE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tche */
  try {
/*@egen*/ < TCHE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void bah():
{/*@bgen(jjtree) bah */
  SimpleNode jjtn000 = new SimpleNode(JJTBAH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bah */
  try {
/*@egen*/ < BAH > <FIM_LINHA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void dai():
{/*@bgen(jjtree) dai */
  SimpleNode jjtn000 = new SimpleNode(JJTDAI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dai */
  try {
/*@egen*/ < DAI >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void de():
{/*@bgen(jjtree) de */
  SimpleNode jjtn000 = new SimpleNode(JJTDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) de */
  try {
/*@egen*/ < DE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void ate():
{/*@bgen(jjtree) ate */
  SimpleNode jjtn000 = new SimpleNode(JJTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ate */
  try {
/*@egen*/ < ATE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void se():
{/*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) se */
  try {
/*@egen*/ < SE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void senao():
{/*@bgen(jjtree) senao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) senao */
  try {
/*@egen*/ < SENAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void funcao():
{/*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcao */
  try {
/*@egen*/ < FUNCAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void devolta():
{/*@bgen(jjtree) devolta */
  SimpleNode jjtn000 = new SimpleNode(JJTDEVOLTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) devolta */
  try {
/*@egen*/ < DEVOLTA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void trovar():
{/*@bgen(jjtree) trovar */
  SimpleNode jjtn000 = new SimpleNode(JJTTROVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) trovar */
  try {
/*@egen*/ < TROVAR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void escuitar():
{/*@bgen(jjtree) escuitar */
  SimpleNode jjtn000 = new SimpleNode(JJTESCUITAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) escuitar */
  try {
/*@egen*/ < ESCUITAR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void fimDeArquivo():
{/*@bgen(jjtree) fimDeArquivo */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMDEARQUIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fimDeArquivo */
  try {
/*@egen*/ < EOF >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void pareHome():
{/*@bgen(jjtree) pareHome */
  SimpleNode jjtn000 = new SimpleNode(JJTPAREHOME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pareHome */
  try {
/*@egen*/ < PARE_HOME >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


/* SIMBOLOS */
void simboloAtribuicao():
{/*@bgen(jjtree) simboloAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMBOLOATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simboloAtribuicao */
  try {
/*@egen*/ < ATRIBUICAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void abreParentese():
{/*@bgen(jjtree) abreParentese */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) abreParentese */
  try {
/*@egen*/ < ABRE_PARENTESE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void fechaParentese():
{/*@bgen(jjtree) fechaParentese */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fechaParentese */
  try {
/*@egen*/ < FECHA_PARENTESE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void fimLinha():
{/*@bgen(jjtree) fimLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fimLinha */
  try {
/*@egen*/ < FIM_LINHA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void virgula():
{/*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) virgula */
  try {
/*@egen*/ < VIRGULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


/* TIPOS DE DADO */
void redondo():
{/*@bgen(jjtree) redondo */
  SimpleNode jjtn000 = new SimpleNode(JJTREDONDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) redondo */
  try {
/*@egen*/ < REDONDO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void quebrado():
{/*@bgen(jjtree) quebrado */
  SimpleNode jjtn000 = new SimpleNode(JJTQUEBRADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) quebrado */
  try {
/*@egen*/ < QUEBRADO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void trova():
{/*@bgen(jjtree) trova */
  SimpleNode jjtn000 = new SimpleNode(JJTTROVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) trova */
  try {
/*@egen*/ < TROVA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void logico():
{/*@bgen(jjtree) logico */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logico */
  try {
/*@egen*/ < LOGICO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void vazio():
{/*@bgen(jjtree) vazio */
  SimpleNode jjtn000 = new SimpleNode(JJTVAZIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) vazio */
  try {
/*@egen*/ < VAZIO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


/* IDENTIFICADORES: */
void nomeVariavel():
{/*@bgen(jjtree) nomeVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) nomeVariavel */
  try {
/*@egen*/ < NOME_VARIAVEL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void nomeFuncao():
{/*@bgen(jjtree) nomeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) nomeFuncao */
  try {
/*@egen*/ < NOME_FUNCAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void texto():
{/*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) texto */
  try {
/*@egen*/ < TEXTO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void numeroComSinal():
{/*@bgen(jjtree) numeroComSinal */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMEROCOMSINAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) numeroComSinal */
  try {
/*@egen*/ ((mais() | menos())?< NUMERO >)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void booleano():
{/*@bgen(jjtree) booleano */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) booleano */
  try {
/*@egen*/ < BOOLEANO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


/* REGRAS SINTATICAS */
void linha():
{/*@bgen(jjtree) linha */
  SimpleNode jjtn000 = new SimpleNode(JJTLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.linha; }
{/*@bgen(jjtree) linha */
  try {
/*@egen*/
  try {
    (elementoDeLinha())? fimLinha()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "linha");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void elementoDeLinha():
{/*@bgen(jjtree) elementoDeLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENTODELINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.elementoDeLinha; }
{/*@bgen(jjtree) elementoDeLinha */
  try {
/*@egen*/
  try {
    atribuicao() | declaracaoDeVariavel() | chamadaDeFuncao() | funcoesNativas() | retornoDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "elementoDeLinha");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bloco():
{/*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.bloco; }
{/*@bgen(jjtree) bloco */
  try {
/*@egen*/
  try {
    inicioDoLoqueando() | inicioDoRepeteco() | inicioSe() | definicaoDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "bloco");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// LINHA
void atribuicao():
{/*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.atribuicao; }
{/*@bgen(jjtree) atribuicao */
  try {
/*@egen*/
  try {
    nomeVariavel() (operadorMatematico())? lacoDeAtribuicao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "atribuicao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lacoDeAtribuicao():
{/*@bgen(jjtree) lacoDeAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTLACODEATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.lacoDeAtribuicao; }
{/*@bgen(jjtree) lacoDeAtribuicao */
  try {
/*@egen*/
  try {
    simboloAtribuicao() expressao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "lacoDeAtribuicao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expressao():
{/*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.expressao; }
{/*@bgen(jjtree) expressao */
  try {
/*@egen*/
  try {
    (negacao())? atribuivel() (operador() expressao())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "expressao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void atribuivel():
{/*@bgen(jjtree) atribuivel */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.atribuivel; }
{/*@bgen(jjtree) atribuivel */
  try {
/*@egen*/
  try {
    abreParentese() expressao() fechaParentese() | numeroComSinal() | texto() | booleano() | nomeVariavel() | chamadaDeFuncao() | funcaoEscuitar()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "atribuivel");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operador():
{/*@bgen(jjtree) operador */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.operador; }
{/*@bgen(jjtree) operador */
  try {
/*@egen*/
  try {
    operadorMatematico() | operadorLogico() | conectorLogico()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "operador");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operadorMatematico():
{/*@bgen(jjtree) operadorMatematico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMATEMATICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.operadorMatematico; }
{/*@bgen(jjtree) operadorMatematico */
  try {
/*@egen*/
  try {
    mais() | menos() | vezes() | dividido() | elevado() | resto()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "operadorMatematico");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operadorLogico():
{/*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.operadorLogico; }
{/*@bgen(jjtree) operadorLogico */
  try {
/*@egen*/
  try {
    maior() | menor() | maiorIgual() | menorIgual() | igual() | diferente()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "operadorLogico");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void conectorLogico():
{/*@bgen(jjtree) conectorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTCONECTORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.conectorLogico; }
{/*@bgen(jjtree) conectorLogico */
  try {
/*@egen*/
  try {
    e() | ou()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "conectorLogico");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracaoDeVariavel():
{/*@bgen(jjtree) declaracaoDeVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAODEVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.declaracaoDeVariavel; }
{/*@bgen(jjtree) declaracaoDeVariavel */
  try {
/*@egen*/
  try {
    tipoDeDado() listaDeDeclaracao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "declaracaoDeVariavel");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoDeDado():
{/*@bgen(jjtree) tipoDeDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODEDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.tipoDeDado; }
{/*@bgen(jjtree) tipoDeDado */
  try {
/*@egen*/
  try {
    redondo() | quebrado() | trova() | logico()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "tipoDeDado");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void listaDeDeclaracao():
{/*@bgen(jjtree) listaDeDeclaracao */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADEDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.listaDeDeclaracao; }
{/*@bgen(jjtree) listaDeDeclaracao */
  try {
/*@egen*/
  try {
    nomeVariavel() (lacoDeAtribuicao())? (virgula() listaDeDeclaracao())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "listaDeDeclaracao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void chamadaDeFuncao():
{/*@bgen(jjtree) chamadaDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMADADEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.chamadaDeFuncao; }
{/*@bgen(jjtree) chamadaDeFuncao */
  try {
/*@egen*/
  try {
    nomeFuncao() abreParentese() (passagemDeParametros())? fechaParentese()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "chamadaDeFuncao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void passagemDeParametros():
{/*@bgen(jjtree) passagemDeParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTPASSAGEMDEPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.passagemDeParametros; }
{/*@bgen(jjtree) passagemDeParametros */
  try {
/*@egen*/
  try {
    expressao() (virgula() passagemDeParametros())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "passagemDeParametros");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funcoesNativas():
{/*@bgen(jjtree) funcoesNativas */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCOESNATIVAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.funcoesNativas; }
{/*@bgen(jjtree) funcoesNativas */
  try {
/*@egen*/
  try {
    funcaoTrovar() |  funcaoEscuitar()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "funcoesNativas");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funcaoTrovar():
{/*@bgen(jjtree) funcaoTrovar */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOTROVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.funcaoTrovar; }
{/*@bgen(jjtree) funcaoTrovar */
  try {
/*@egen*/
  try {
    trovar() abreParentese() expressao() fechaParentese()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "funcaoTrovar");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funcaoEscuitar():
{/*@bgen(jjtree) funcaoEscuitar */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOESCUITAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.funcaoEscuitar; }
{/*@bgen(jjtree) funcaoEscuitar */
  try {
/*@egen*/
  try {
    escuitar() abreParentese() (texto())? fechaParentese()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "funcaoEscuitar");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void retornoDeFuncao():
{/*@bgen(jjtree) retornoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.retornoDeFuncao; }
{/*@bgen(jjtree) retornoDeFuncao */
  try {
/*@egen*/
  try {
    devolta() expressao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "retornoDeFuncao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// BLOCO
void inicioDoLoqueando():
{/*@bgen(jjtree) inicioDoLoqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIODOLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.inicioDoLoqueando; }
{/*@bgen(jjtree) inicioDoLoqueando */
  try {
/*@egen*/
  try {
    loqueando() expressao() meioBlocoRepeticao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioDoLoqueando");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void inicioDoRepeteco():
{/*@bgen(jjtree) inicioDoRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIODOREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.inicioDoRepeteco; }
{/*@bgen(jjtree) inicioDoRepeteco */
  try {
/*@egen*/
  try {
    repeteco() nomeVariavel() de() expressao() ate() expressao() meioBlocoRepeticao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioDoRepeteco");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void meioBlocoRepeticao():
{/*@bgen(jjtree) meioBlocoRepeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIOBLOCOREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.meioBlocoRepeticao; }
{/*@bgen(jjtree) meioBlocoRepeticao */
  try {
/*@egen*/
  try {
    dai() linha() | tche() fimLinha() fimBlocoRepeticao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "meioBlocoRepeticao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fimBlocoRepeticao():
{/*@bgen(jjtree) fimBlocoRepeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCOREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.fimBlocoRepeticao; }
{/*@bgen(jjtree) fimBlocoRepeticao */
  try {
/*@egen*/
  try {
    linha() fimBlocoRepeticao() | bloco() fimBlocoRepeticao() | bah()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "fimBlocoRepeticao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void inicioSe():
{/*@bgen(jjtree) inicioSe */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.inicioSe; }
{/*@bgen(jjtree) inicioSe */
  try {
/*@egen*/
  try {
    se() expressao() (seDeUmaLinha() | (tche() fimLinha() blocoSe()))
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioSe");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void seDeUmaLinha():
{/*@bgen(jjtree) seDeUmaLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTSEDEUMALINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.seDeUmaLinha; }
{/*@bgen(jjtree) seDeUmaLinha */
  try {
/*@egen*/
  try {
    dai() elementoDeLinha() (fimLinha() | senao() (dai())? linha())
  } catch (ParseException e) {
    consumeUntil(recovery, e, "seDeUmaLinha");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void blocoSe():
{/*@bgen(jjtree) blocoSe */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.blocoSe; }
{/*@bgen(jjtree) blocoSe */
  try {
/*@egen*/
  try {
    linha() blocoSe() | bloco() blocoSe() | bah() | inicioSenao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "blocoSe");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void inicioSenao():
{/*@bgen(jjtree) inicioSenao */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.inicioSenao; }
{/*@bgen(jjtree) inicioSenao */
  try {
/*@egen*/
  try {
    senao() (inicioSe() | tche() fimLinha() fimBlocoSenao())
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioSenao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fimBlocoSenao():
{/*@bgen(jjtree) fimBlocoSenao */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCOSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.fimBlocoSenao; }
{/*@bgen(jjtree) fimBlocoSenao */
  try {
/*@egen*/
  try {
    linha() fimBlocoSenao() | bloco() fimBlocoSenao() | bah()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "fimBlocoSenao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void definicaoDeFuncao():
{/*@bgen(jjtree) definicaoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINICAODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.definicaoDeFuncao; }
{/*@bgen(jjtree) definicaoDeFuncao */
  try {
/*@egen*/
  try {
    funcao() tipoDeRetorno() nomeFuncao() abreParentese() (definicaoDeParametros())? fechaParentese() meioDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "definicaoDeFuncao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoDeRetorno():
{/*@bgen(jjtree) tipoDeRetorno */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODERETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.tipoDeRetorno; }
{/*@bgen(jjtree) tipoDeRetorno */
  try {
/*@egen*/
  try {
    vazio() | tipoDeDado()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "tipoDeRetorno");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void definicaoDeParametros():
{/*@bgen(jjtree) definicaoDeParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINICAODEPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.definicaoDeParametros; }
{/*@bgen(jjtree) definicaoDeParametros */
  try {
/*@egen*/
  try {
    tipoDeDado() nomeVariavel() (lacoDeAtribuicao())? (virgula() definicaoDeParametros())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "definicaoDeParametros");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void meioDeFuncao():
{/*@bgen(jjtree) meioDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.meioDeFuncao; }
{/*@bgen(jjtree) meioDeFuncao */
  try {
/*@egen*/
  try {
    dai() linha() | tche() fimLinha() blocoDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "meioDeFuncao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void blocoDeFuncao():
{/*@bgen(jjtree) blocoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recovery = Follow.blocoDeFuncao; }
{/*@bgen(jjtree) blocoDeFuncao */
  try {
/*@egen*/
  try {
    linha() blocoDeFuncao() | bloco() blocoDeFuncao() | bah()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "blocoDeFuncao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
