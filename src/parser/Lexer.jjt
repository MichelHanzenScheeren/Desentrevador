/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options { static = true; }

PARSER_BEGIN(Lexer)

package parser;

import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileInputStream;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Scanner;
import recovery.*;

public class Lexer {
  public static boolean errorJumpLine = true;

  public static void execute(Lexer analisador) throws ParseException {
    SimpleNode node = analisador.main();
    // node.dump("->");
    System.out.println("--------------------------------------");
    System.out.println("Mas ah indio veio, que escrita bagual!");
    System.out.println("--------------------------------------");
  }

  public static String getPathFromSelectedFile() throws Throwable {
    System.out.println(">> Tu trata de pega o arquivo ai entao:");
    JFileChooser arquivo = new JFileChooser();
    arquivo.showOpenDialog(null);
    File selected = arquivo.getSelectedFile();
    if(selected == null) throw new Throwable("O tongo veio, cancelou o negocio!");
    return selected.getAbsolutePath();
  }

  public static void extensionCheck(String file) throws Throwable {
    String extension = "";
    int i = file.lastIndexOf('.');
    if (i >= 0) { extension = file.substring(i+1); }
    if(!extension.equals("entrevero"))
    throw new Throwable("Meu favor, nao sabe nem a extensao, bixo buro! Mah use um aquivo \".entrevero\".");
  }

  public static void main(String[] args) {
    try {
      if(args.length == 0) {
        System.out.println(">> Bota teu codigo ai guri:");
        execute(new Lexer(System.in));
      } else if(args[0].contains("-f")) {
        String path = getPathFromSelectedFile();
        extensionCheck(path);
        execute(new Lexer(new FileInputStream(path)));
      } else {
        errorJumpLine = false;
        extensionCheck(args[0]);
        execute(new Lexer(new FileInputStream(args[0])));
      }
    } catch (Throwable e) {
      if(errorJumpLine) System.out.println("");
      System.out.println("DEU RUIM PIA!");
      System.out.println(e.getMessage());
    }
  }

  static public String im(int x) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    } catch (StringIndexOutOfBoundsException e) {}
    return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil( RecoverySet g,
                            ParseException e,
                            String met) throws ParseEOFException, ParseException {
    Token tok;
    System.out.println();
    System.out.println("*** " + met + " ***");
    System.out.println("     Conjunto de sincronização: " + g);

    if(g == null) throw e; // se o conjunto é null, propaga a exceção

    tok = getToken(1);                  // pega token corrente
    while(!eof) {                       // se não chegou ao fim do arquivo
      if(g.contains(tok.kind)) {        // achou um token no conjunto
        System.out.println("     Encontrado token de sincronização: " + im(tok.kind));
        break;
      }

      System.out.println("     Ignorando o token: " + im(tok.kind));
      getNextToken();                   // pega próximo token
      tok = getToken(1);
      if(tok.kind == EOF && !g.contains(EOF)) // fim da entrada?
          eof = true;
    }

    if(tok != lastError) {
      System.out.println(e.getMessage());
      lastError = tok;
    }

    if(eof)
      throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }
}

PARSER_END(Lexer)

SKIP :
{
  " "
| "\r"
| "\t"
}

/* PARA IGNORAR OS COMENTARIOS */
MORE: {"/*" : IN_MULTI_LINE_COMMENT }
<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN: { <MULTI_LINE_COMMENT: "*/" >: DEFAULT }
<IN_MULTI_LINE_COMMENT> MORE : { < ~[] > }

TOKEN: /* OPERADORES */
{
  < MAIS: "+" >
| < MENOS: "-" >
| < VEZES: "*" >
| < DIVIDIDO: "/" >
| < ELEVADO: "^" >
| < RESTO: "%" >
| < ATRIBUICAO: "=" >
| < IGUAL: "==" >
| < DIFERENTE: "!=" >
| < MAIOR: ">" >
| < MENOR: "<" >
| < MAIOR_IGUAL: ">=" >
| < MENOR_IGUAL: "<=" >
| < OU: "ou" >
| < E: "e" >
| < NEGACAO: "!" >
}

TOKEN: /* PALAVRAS RESERVADAS */
{
  < PARE_HOME: "pareHome" >
| < TCHE: "tche" > // ABERTURA DE BLOCO
| < BAH: "bah" > // FECHAMENTO DE BLOCO
| < DAI: "dai" > // OPERACAO DE LINHA
| < FUNCAO: "funcao" >
| < DEVOLTA: "devolta" >
| < LOQUEANDO: "loqueando" > // WHILE
| < REPETECO: "repeteco" > // FOR
| < DE: "de" >
| < ATE: "ate" >
| < SE: "se" >
| < SENAO: "senao" >
| < TROVAR: "Trovar"> // METODO DE ESCRITA
| < ESCUITAR: "Escuitar" > // METODO DE LEITURA
}

TOKEN: /* SIMBOLOS */
{
  < FIM_LINHA: "\n" >
| < VIRGULA: "," >
| < ABRE_PARENTESE: "(" >
| < FECHA_PARENTESE: ")" >
}

TOKEN: /* TIPOS DE DADOS */
{
  < REDONDO: "redondo" > // INTEIRO
| < QUEBRADO: "quebrado" > // FLOAT
| < TROVA: "trova" > // STRING
| < LOGICO: "logico" > // BOOL
| < VAZIO: "vazio" > // VOID
}

TOKEN: /* IDENTIFICADORES */
{
  < BOOLEANO: "causo" | "anedota" > // VERDADEIRO E FALSO
| < NOME_VARIAVEL: (<MINUSCULAS> | "_") (<LETRA> | <DIGITO> | "_")* >
| < NOME_FUNCAO: <MAIUSCULAS> (<LETRA> | <DIGITO> | "_")* >
| < #LETRA: [ "A" - "Z", "a" - "z" ] >
| < #MINUSCULAS: [ "a" - "z" ] >
| < #MAIUSCULAS: [ "A" - "Z" ] >
| < NUMERO: (< DIGITO >)+("."(< DIGITO >)+)? >
| < #DIGITO: [ "0" - "9" ] >
| < TEXTO: ("\"" (~["\n", "\r", "\""])* "\"") | ("'" (~["\n", "\r", "'"])* "'") >
}

/* INICIO DO CODIGO RELACIONADO A ANALISE SINTATICA */
SimpleNode main():
{}
{
  (linha() | bloco())*
  (pareHome() | fimDeArquivo())
  { return jjtThis; }
}


/* OPERADORES */
void mais():
{}
{ < MAIS > }

void menos():
{}
{ < MENOS > }

void vezes():
{}
{ < VEZES > }

void dividido():
{}
{ < DIVIDIDO > }

void elevado():
{}
{ < ELEVADO > }

void resto():
{}
{ < RESTO > }

void maior():
{}
{ < MAIOR > }

void menor():
{}
{ < MENOR > }

void maiorIgual():
{}
{ < MAIOR_IGUAL > }

void menorIgual():
{}
{ < MENOR_IGUAL > }

void igual():
{}
{ < IGUAL > }

void diferente():
{}
{ < DIFERENTE > }

void ou():
{}
{ < OU > }

void e():
{}
{ < E > }

void negacao():
{}
{ < NEGACAO > }


/* PALAVRAS RESERVADAS */
void loqueando():
{}
{ < LOQUEANDO > }

void repeteco():
{}
{ < REPETECO > }

void tche():
{}
{ < TCHE > }

void bah():
{}
{ < BAH > <FIM_LINHA > }

void dai():
{}
{ < DAI > }

void de():
{}
{ < DE > }

void ate():
{}
{ < ATE > }

void se():
{}
{ < SE > }

void senao():
{}
{ < SENAO > }

void funcao():
{}
{ < FUNCAO > }

void devolta():
{}
{ < DEVOLTA > }

void trovar():
{}
{ < TROVAR > }

void escuitar():
{}
{ < ESCUITAR > }

void fimDeArquivo():
{}
{ < EOF > }

void pareHome():
{}
{ < PARE_HOME > }


/* SIMBOLOS */
void simboloAtribuicao():
{}
{ < ATRIBUICAO > }

void abreParentese():
{}
{ < ABRE_PARENTESE > }

void fechaParentese():
{}
{ < FECHA_PARENTESE > }

void fimLinha():
{}
{ < FIM_LINHA > }

void virgula():
{}
{ < VIRGULA > }


/* TIPOS DE DADO */
void redondo():
{}
{ < REDONDO > }

void quebrado():
{}
{ < QUEBRADO > }

void trova():
{}
{ < TROVA > }

void logico():
{}
{ < LOGICO > }

void vazio():
{}
{ < VAZIO > }


/* IDENTIFICADORES: */
void nomeVariavel():
{}
{ < NOME_VARIAVEL > }

void nomeFuncao():
{}
{ < NOME_FUNCAO > }

void texto():
{}
{ < TEXTO > }

void numeroComSinal():
{}
{ ((mais() | menos())?< NUMERO >) }

void booleano():
{}
{ < BOOLEANO > }


/* REGRAS SINTATICAS */
void linha():
{ RecoverySet recovery = Follow.linha; }
{
  try {
    (elementoDeLinha())? fimLinha()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "linha");
  }
}

void elementoDeLinha():
{ RecoverySet recovery = Follow.elementoDeLinha; }
{
  try {
    atribuicao() | declaracaoDeVariavel() | chamadaDeFuncao() | funcoesNativas() | retornoDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "elementoDeLinha");
  }
}

void bloco():
{ RecoverySet recovery = Follow.bloco; }
{
  try {
    inicioDoLoqueando() | inicioDoRepeteco() | inicioSe() | definicaoDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "bloco");
  }
}

// LINHA
void atribuicao():
{ RecoverySet recovery = Follow.atribuicao; }
{
  try {
    nomeVariavel() (operadorMatematico())? lacoDeAtribuicao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "atribuicao");
  }
}

void lacoDeAtribuicao():
{ RecoverySet recovery = Follow.lacoDeAtribuicao; }
{
  try {
    simboloAtribuicao() expressao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "lacoDeAtribuicao");
  }
}

void expressao():
{ RecoverySet recovery = Follow.expressao; }
{
  try {
    (negacao())? atribuivel() (operador() expressao())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "expressao");
  }
}

void atribuivel():
{ RecoverySet recovery = Follow.atribuivel; }
{
  try {
    abreParentese() expressao() fechaParentese() | numeroComSinal() | texto() | booleano() | nomeVariavel() | chamadaDeFuncao() | funcaoEscuitar()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "atribuivel");
  }
}

void operador():
{ RecoverySet recovery = Follow.operador; }
{
  try {
    operadorMatematico() | operadorLogico() | conectorLogico()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "operador");
  }
}

void operadorMatematico():
{ RecoverySet recovery = Follow.operadorMatematico; }
{
  try {
    mais() | menos() | vezes() | dividido() | elevado() | resto()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "operadorMatematico");
  }
}

void operadorLogico():
{ RecoverySet recovery = Follow.operadorLogico; }
{
  try {
    maior() | menor() | maiorIgual() | menorIgual() | igual() | diferente()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "operadorLogico");
  }
}

void conectorLogico():
{ RecoverySet recovery = Follow.conectorLogico; }
{
  try {
    e() | ou()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "conectorLogico");
  }
}

void declaracaoDeVariavel():
{ RecoverySet recovery = Follow.declaracaoDeVariavel; }
{
  try {
    tipoDeDado() listaDeDeclaracao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "declaracaoDeVariavel");
  }
}

void tipoDeDado():
{ RecoverySet recovery = Follow.tipoDeDado; }
{
  try {
    redondo() | quebrado() | trova() | logico()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "tipoDeDado");
  }
}

void listaDeDeclaracao():
{ RecoverySet recovery = Follow.listaDeDeclaracao; }
{
  try {
    nomeVariavel() (lacoDeAtribuicao())? (virgula() listaDeDeclaracao())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "listaDeDeclaracao");
  }
}

void chamadaDeFuncao():
{ RecoverySet recovery = Follow.chamadaDeFuncao; }
{
  try {
    nomeFuncao() abreParentese() (passagemDeParametros())? fechaParentese()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "chamadaDeFuncao");
  }
}

void passagemDeParametros():
{ RecoverySet recovery = Follow.passagemDeParametros; }
{
  try {
    expressao() (virgula() passagemDeParametros())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "passagemDeParametros");
  }
}

void funcoesNativas():
{ RecoverySet recovery = Follow.funcoesNativas; }
{
  try {
    funcaoTrovar() |  funcaoEscuitar()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "funcoesNativas");
  }
}

void funcaoTrovar():
{ RecoverySet recovery = Follow.funcaoTrovar; }
{
  try {
    trovar() abreParentese() expressao() fechaParentese()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "funcaoTrovar");
  }
}

void funcaoEscuitar():
{ RecoverySet recovery = Follow.funcaoEscuitar; }
{
  try {
    escuitar() abreParentese() (texto())? fechaParentese()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "funcaoEscuitar");
  }
}

void retornoDeFuncao():
{ RecoverySet recovery = Follow.retornoDeFuncao; }
{
  try {
    devolta() expressao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "retornoDeFuncao");
  }
}

// BLOCO
void inicioDoLoqueando():
{ RecoverySet recovery = Follow.inicioDoLoqueando; }
{
  try {
    loqueando() expressao() meioBlocoRepeticao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioDoLoqueando");
  }
}

void inicioDoRepeteco():
{ RecoverySet recovery = Follow.inicioDoRepeteco; }
{
  try {
    repeteco() nomeVariavel() de() expressao() ate() expressao() meioBlocoRepeticao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioDoRepeteco");
  }
}

void meioBlocoRepeticao():
{ RecoverySet recovery = Follow.meioBlocoRepeticao; }
{
  try {
    dai() linha() | tche() fimLinha() fimBlocoRepeticao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "meioBlocoRepeticao");
  }
}

void fimBlocoRepeticao():
{ RecoverySet recovery = Follow.fimBlocoRepeticao; }
{
  try {
    linha() fimBlocoRepeticao() | bloco() fimBlocoRepeticao() | bah()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "fimBlocoRepeticao");
  }
}

void inicioSe():
{ RecoverySet recovery = Follow.inicioSe; }
{
  try {
    se() expressao() (seDeUmaLinha() | (tche() fimLinha() blocoSe()))
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioSe");
  }
}

void seDeUmaLinha():
{ RecoverySet recovery = Follow.seDeUmaLinha; }
{
  try {
    dai() elementoDeLinha() (fimLinha() | senao() (dai())? linha())
  } catch (ParseException e) {
    consumeUntil(recovery, e, "seDeUmaLinha");
  }
}

void blocoSe():
{ RecoverySet recovery = Follow.blocoSe; }
{
  try {
    linha() blocoSe() | bloco() blocoSe() | bah() | inicioSenao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "blocoSe");
  }
}

void inicioSenao():
{ RecoverySet recovery = Follow.inicioSenao; }
{
  try {
    senao() (inicioSe() | tche() fimLinha() fimBlocoSenao())
  } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioSenao");
  }
}

void fimBlocoSenao():
{ RecoverySet recovery = Follow.fimBlocoSenao; }
{
  try {
    linha() fimBlocoSenao() | bloco() fimBlocoSenao() | bah()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "fimBlocoSenao");
  }
}

void definicaoDeFuncao():
{ RecoverySet recovery = Follow.definicaoDeFuncao; }
{
  try {
    funcao() tipoDeRetorno() nomeFuncao() abreParentese() (definicaoDeParametros())? fechaParentese() meioDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "definicaoDeFuncao");
  }
}

void tipoDeRetorno():
{ RecoverySet recovery = Follow.tipoDeRetorno; }
{
  try {
    vazio() | tipoDeDado()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "tipoDeRetorno");
  }
}

void definicaoDeParametros():
{ RecoverySet recovery = Follow.definicaoDeParametros; }
{
  try {
    tipoDeDado() nomeVariavel() (lacoDeAtribuicao())? (virgula() definicaoDeParametros())?
  } catch (ParseException e) {
    consumeUntil(recovery, e, "definicaoDeParametros");
  }
}

void meioDeFuncao():
{ RecoverySet recovery = Follow.meioDeFuncao; }
{
  try {
    dai() linha() | tche() fimLinha() blocoDeFuncao()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "meioDeFuncao");
  }
}

void blocoDeFuncao():
{ RecoverySet recovery = Follow.blocoDeFuncao; }
{
  try {
    linha() blocoDeFuncao() | bloco() blocoDeFuncao() | bah()
  } catch (ParseException e) {
    consumeUntil(recovery, e, "blocoDeFuncao");
  }
}
