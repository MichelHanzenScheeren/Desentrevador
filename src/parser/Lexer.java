/* Generated By:JJTree&JavaCC: Do not edit this line. Lexer.java */
package parser;

import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileInputStream;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Scanner;
import recovery.*;

public class Lexer/*@bgen(jjtree)*/implements LexerTreeConstants, LexerConstants {/*@bgen(jjtree)*/
  protected static JJTLexerState jjtree = new JJTLexerState();public static boolean errorJumpLine = true;

  public static void execute(Lexer analisador) throws ParseException {
    SimpleNode node = analisador.main();
    // node.dump("->");
    System.out.println("--------------------------------------");
    System.out.println("Mas ah indio veio, que escrita bagual!");
    System.out.println("--------------------------------------");
  }

  public static String getPathFromSelectedFile() throws Throwable {
    System.out.println(">> Tu trata de pega o arquivo ai entao:");
    JFileChooser arquivo = new JFileChooser();
    arquivo.showOpenDialog(null);
    File selected = arquivo.getSelectedFile();
    if(selected == null) throw new Throwable("O tongo veio, cancelou o negocio!");
    return selected.getAbsolutePath();
  }

  public static void extensionCheck(String file) throws Throwable {
    String extension = "";
    int i = file.lastIndexOf('.');
    if (i >= 0) { extension = file.substring(i+1); }
    if(!extension.equals("entrevero"))
    throw new Throwable("Meu favor, nao sabe nem a extensao, bixo buro! Mah use um aquivo \u005c".entrevero\u005c".");
  }

  public static void main(String[] args) {
    try {
      if(args.length == 0) {
        System.out.println(">> Bota teu codigo ai guri:");
        execute(new Lexer(System.in));
      } else if(args[0].contains("-f")) {
        String path = getPathFromSelectedFile();
        extensionCheck(path);
        execute(new Lexer(new FileInputStream(path)));
      } else {
        errorJumpLine = false;
        extensionCheck(args[0]);
        execute(new Lexer(new FileInputStream(args[0])));
      }
    } catch (Throwable e) {
      if(errorJumpLine) System.out.println("");
      System.out.println("DEU RUIM PIA!");
      System.out.println(e.getMessage());
    }
  }

  static public String im(int x) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\u005c"");
    try {
      s = s.substring(1,k);
    } catch (StringIndexOutOfBoundsException e) {}
    return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil( RecoverySet g,
                            ParseException e,
                            String met) throws ParseEOFException, ParseException {
    Token tok;
    System.out.println();
    System.out.println("*** " + met + " ***");
    System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

    if(g == null) throw e; // se o conjunto é null, propaga a exceção

    tok = getToken(1);                  // pega token corrente
    while(!eof) {                       // se não chegou ao fim do arquivo
      if(g.contains(tok.kind)) {        // achou um token no conjunto
        System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " + im(tok.kind));
        break;
      }

      System.out.println("     Ignorando o token: " + im(tok.kind));
      getNextToken();                   // pega próximo token
      tok = getToken(1);
      if(tok.kind == EOF && !g.contains(EOF)) // fim da entrada?
          eof = true;
    }

    if(tok != lastError) {
      System.out.println(e.getMessage());
      lastError = tok;
    }

    if(eof)
      throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

/* INICIO DO CODIGO RELACIONADO A ANALISE SINTATICA */
  static final public SimpleNode main() throws ParseException {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCAO:
        case DEVOLTA:
        case LOQUEANDO:
        case REPETECO:
        case SE:
        case TROVAR:
        case ESCUITAR:
        case FIM_LINHA:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEVOLTA:
        case TROVAR:
        case ESCUITAR:
        case FIM_LINHA:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          linha();
          break;
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
          bloco();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARE_HOME:
        pareHome();
        break;
      case 0:
        fimDeArquivo();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* OPERADORES */
  static final public void mais() throws ParseException {
 /*@bgen(jjtree) mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menos() throws ParseException {
 /*@bgen(jjtree) menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void vezes() throws ParseException {
 /*@bgen(jjtree) vezes */
  SimpleNode jjtn000 = new SimpleNode(JJTVEZES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VEZES);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void dividido() throws ParseException {
 /*@bgen(jjtree) dividido */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIVIDIDO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void elevado() throws ParseException {
 /*@bgen(jjtree) elevado */
  SimpleNode jjtn000 = new SimpleNode(JJTELEVADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELEVADO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void resto() throws ParseException {
 /*@bgen(jjtree) resto */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESTO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void maior() throws ParseException {
 /*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menor() throws ParseException {
 /*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void maiorIgual() throws ParseException {
 /*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR_IGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menorIgual() throws ParseException {
 /*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR_IGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void igual() throws ParseException {
 /*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void diferente() throws ParseException {
 /*@bgen(jjtree) diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFERENTE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ou() throws ParseException {
 /*@bgen(jjtree) ou */
  SimpleNode jjtn000 = new SimpleNode(JJTOU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OU);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void e() throws ParseException {
 /*@bgen(jjtree) e */
  SimpleNode jjtn000 = new SimpleNode(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(E);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void negacao() throws ParseException {
 /*@bgen(jjtree) negacao */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEGACAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* PALAVRAS RESERVADAS */
  static final public void loqueando() throws ParseException {
 /*@bgen(jjtree) loqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOQUEANDO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void repeteco() throws ParseException {
 /*@bgen(jjtree) repeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPETECO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tche() throws ParseException {
 /*@bgen(jjtree) tche */
  SimpleNode jjtn000 = new SimpleNode(JJTTCHE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TCHE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bah() throws ParseException {
 /*@bgen(jjtree) bah */
  SimpleNode jjtn000 = new SimpleNode(JJTBAH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BAH);
      jj_consume_token(FIM_LINHA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void dai() throws ParseException {
 /*@bgen(jjtree) dai */
  SimpleNode jjtn000 = new SimpleNode(JJTDAI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DAI);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void de() throws ParseException {
 /*@bgen(jjtree) de */
  SimpleNode jjtn000 = new SimpleNode(JJTDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ate() throws ParseException {
 /*@bgen(jjtree) ate */
  SimpleNode jjtn000 = new SimpleNode(JJTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void se() throws ParseException {
 /*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void senao() throws ParseException {
 /*@bgen(jjtree) senao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SENAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcao() throws ParseException {
 /*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void devolta() throws ParseException {
 /*@bgen(jjtree) devolta */
  SimpleNode jjtn000 = new SimpleNode(JJTDEVOLTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEVOLTA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void trovar() throws ParseException {
 /*@bgen(jjtree) trovar */
  SimpleNode jjtn000 = new SimpleNode(JJTTROVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TROVAR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void escuitar() throws ParseException {
 /*@bgen(jjtree) escuitar */
  SimpleNode jjtn000 = new SimpleNode(JJTESCUITAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ESCUITAR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimDeArquivo() throws ParseException {
 /*@bgen(jjtree) fimDeArquivo */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMDEARQUIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void pareHome() throws ParseException {
 /*@bgen(jjtree) pareHome */
  SimpleNode jjtn000 = new SimpleNode(JJTPAREHOME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PARE_HOME);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* SIMBOLOS */
  static final public void simboloAtribuicao() throws ParseException {
 /*@bgen(jjtree) simboloAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMBOLOATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATRIBUICAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void abreParentese() throws ParseException {
 /*@bgen(jjtree) abreParentese */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRE_PARENTESE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fechaParentese() throws ParseException {
 /*@bgen(jjtree) fechaParentese */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHA_PARENTESE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimLinha() throws ParseException {
 /*@bgen(jjtree) fimLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_LINHA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void virgula() throws ParseException {
 /*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VIRGULA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* TIPOS DE DADO */
  static final public void redondo() throws ParseException {
 /*@bgen(jjtree) redondo */
  SimpleNode jjtn000 = new SimpleNode(JJTREDONDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REDONDO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void quebrado() throws ParseException {
 /*@bgen(jjtree) quebrado */
  SimpleNode jjtn000 = new SimpleNode(JJTQUEBRADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(QUEBRADO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void trova() throws ParseException {
 /*@bgen(jjtree) trova */
  SimpleNode jjtn000 = new SimpleNode(JJTTROVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TROVA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void logico() throws ParseException {
 /*@bgen(jjtree) logico */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOGICO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void vazio() throws ParseException {
 /*@bgen(jjtree) vazio */
  SimpleNode jjtn000 = new SimpleNode(JJTVAZIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAZIO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* IDENTIFICADORES: */
  static final public void nomeVariavel() throws ParseException {
 /*@bgen(jjtree) nomeVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOME_VARIAVEL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void nomeFuncao() throws ParseException {
 /*@bgen(jjtree) nomeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOME_FUNCAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void texto() throws ParseException {
 /*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TEXTO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void numeroComSinal() throws ParseException {
 /*@bgen(jjtree) numeroComSinal */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMEROCOMSINAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
      case MENOS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
          mais();
          break;
        case MENOS:
          menos();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(NUMERO);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void booleano() throws ParseException {
 /*@bgen(jjtree) booleano */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEANO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* REGRAS SINTATICAS */
  static final public void linha() throws ParseException {
 /*@bgen(jjtree) linha */
  SimpleNode jjtn000 = new SimpleNode(JJTLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.linha;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEVOLTA:
        case TROVAR:
        case ESCUITAR:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          elementoDeLinha();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        fimLinha();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "linha");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void elementoDeLinha() throws ParseException {
 /*@bgen(jjtree) elementoDeLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENTODELINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.elementoDeLinha;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOME_VARIAVEL:
          atribuicao();
          break;
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
          declaracaoDeVariavel();
          break;
        case NOME_FUNCAO:
          chamadaDeFuncao();
          break;
        case TROVAR:
        case ESCUITAR:
          funcoesNativas();
          break;
        case DEVOLTA:
          retornoDeFuncao();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "elementoDeLinha");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bloco() throws ParseException {
 /*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.bloco;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOQUEANDO:
          inicioDoLoqueando();
          break;
        case REPETECO:
          inicioDoRepeteco();
          break;
        case SE:
          inicioSe();
          break;
        case FUNCAO:
          definicaoDeFuncao();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "bloco");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// LINHA
  static final public void atribuicao() throws ParseException {
 /*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.atribuicao;
    try {
      try {
        nomeVariavel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
        case VEZES:
        case DIVIDIDO:
        case ELEVADO:
        case RESTO:
          operadorMatematico();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        lacoDeAtribuicao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "atribuicao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lacoDeAtribuicao() throws ParseException {
 /*@bgen(jjtree) lacoDeAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTLACODEATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.lacoDeAtribuicao;
    try {
      try {
        simboloAtribuicao();
        expressao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "lacoDeAtribuicao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expressao() throws ParseException {
 /*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.expressao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEGACAO:
          negacao();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        atribuivel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
        case VEZES:
        case DIVIDIDO:
        case ELEVADO:
        case RESTO:
        case IGUAL:
        case DIFERENTE:
        case MAIOR:
        case MENOR:
        case MAIOR_IGUAL:
        case MENOR_IGUAL:
        case OU:
        case E:
          operador();
          expressao();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "expressao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void atribuivel() throws ParseException {
 /*@bgen(jjtree) atribuivel */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.atribuivel;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRE_PARENTESE:
          abreParentese();
          expressao();
          fechaParentese();
          break;
        case MAIS:
        case MENOS:
        case NUMERO:
          numeroComSinal();
          break;
        case TEXTO:
          texto();
          break;
        case BOOLEANO:
          booleano();
          break;
        case NOME_VARIAVEL:
          nomeVariavel();
          break;
        case NOME_FUNCAO:
          chamadaDeFuncao();
          break;
        case ESCUITAR:
          funcaoEscuitar();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "atribuivel");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operador() throws ParseException {
 /*@bgen(jjtree) operador */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.operador;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
        case VEZES:
        case DIVIDIDO:
        case ELEVADO:
        case RESTO:
          operadorMatematico();
          break;
        case IGUAL:
        case DIFERENTE:
        case MAIOR:
        case MENOR:
        case MAIOR_IGUAL:
        case MENOR_IGUAL:
          operadorLogico();
          break;
        case OU:
        case E:
          conectorLogico();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "operador");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorMatematico() throws ParseException {
 /*@bgen(jjtree) operadorMatematico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMATEMATICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.operadorMatematico;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
          mais();
          break;
        case MENOS:
          menos();
          break;
        case VEZES:
          vezes();
          break;
        case DIVIDIDO:
          dividido();
          break;
        case ELEVADO:
          elevado();
          break;
        case RESTO:
          resto();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "operadorMatematico");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorLogico() throws ParseException {
 /*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.operadorLogico;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIOR:
          maior();
          break;
        case MENOR:
          menor();
          break;
        case MAIOR_IGUAL:
          maiorIgual();
          break;
        case MENOR_IGUAL:
          menorIgual();
          break;
        case IGUAL:
          igual();
          break;
        case DIFERENTE:
          diferente();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "operadorLogico");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void conectorLogico() throws ParseException {
 /*@bgen(jjtree) conectorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTCONECTORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.conectorLogico;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case E:
          e();
          break;
        case OU:
          ou();
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "conectorLogico");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void declaracaoDeVariavel() throws ParseException {
 /*@bgen(jjtree) declaracaoDeVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAODEVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.declaracaoDeVariavel;
    try {
      try {
        tipoDeDado();
        listaDeDeclaracao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "declaracaoDeVariavel");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoDeDado() throws ParseException {
 /*@bgen(jjtree) tipoDeDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODEDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.tipoDeDado;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REDONDO:
          redondo();
          break;
        case QUEBRADO:
          quebrado();
          break;
        case TROVA:
          trova();
          break;
        case LOGICO:
          logico();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "tipoDeDado");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listaDeDeclaracao() throws ParseException {
 /*@bgen(jjtree) listaDeDeclaracao */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADEDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.listaDeDeclaracao;
    try {
      try {
        nomeVariavel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          lacoDeAtribuicao();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          virgula();
          listaDeDeclaracao();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "listaDeDeclaracao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaDeFuncao() throws ParseException {
 /*@bgen(jjtree) chamadaDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMADADEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.chamadaDeFuncao;
    try {
      try {
        nomeFuncao();
        abreParentese();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
        case NEGACAO:
        case ESCUITAR:
        case ABRE_PARENTESE:
        case BOOLEANO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
        case NUMERO:
        case TEXTO:
          passagemDeParametros();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        fechaParentese();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "chamadaDeFuncao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void passagemDeParametros() throws ParseException {
 /*@bgen(jjtree) passagemDeParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTPASSAGEMDEPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.passagemDeParametros;
    try {
      try {
        expressao();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          virgula();
          passagemDeParametros();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "passagemDeParametros");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcoesNativas() throws ParseException {
 /*@bgen(jjtree) funcoesNativas */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCOESNATIVAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.funcoesNativas;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TROVAR:
          funcaoTrovar();
          break;
        case ESCUITAR:
          funcaoEscuitar();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "funcoesNativas");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcaoTrovar() throws ParseException {
 /*@bgen(jjtree) funcaoTrovar */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOTROVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.funcaoTrovar;
    try {
      try {
        trovar();
        abreParentese();
        expressao();
        fechaParentese();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "funcaoTrovar");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcaoEscuitar() throws ParseException {
 /*@bgen(jjtree) funcaoEscuitar */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOESCUITAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.funcaoEscuitar;
    try {
      try {
        escuitar();
        abreParentese();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXTO:
          texto();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        fechaParentese();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "funcaoEscuitar");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void retornoDeFuncao() throws ParseException {
 /*@bgen(jjtree) retornoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.retornoDeFuncao;
    try {
      try {
        devolta();
        expressao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "retornoDeFuncao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// BLOCO
  static final public void inicioDoLoqueando() throws ParseException {
 /*@bgen(jjtree) inicioDoLoqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIODOLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.inicioDoLoqueando;
    try {
      try {
        loqueando();
        expressao();
        meioBlocoRepeticao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioDoLoqueando");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioDoRepeteco() throws ParseException {
 /*@bgen(jjtree) inicioDoRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIODOREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.inicioDoRepeteco;
    try {
      try {
        repeteco();
        nomeVariavel();
        de();
        expressao();
        ate();
        expressao();
        meioBlocoRepeticao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioDoRepeteco");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void meioBlocoRepeticao() throws ParseException {
 /*@bgen(jjtree) meioBlocoRepeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIOBLOCOREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.meioBlocoRepeticao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DAI:
          dai();
          linha();
          break;
        case TCHE:
          tche();
          fimLinha();
          fimBlocoRepeticao();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "meioBlocoRepeticao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimBlocoRepeticao() throws ParseException {
 /*@bgen(jjtree) fimBlocoRepeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCOREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.fimBlocoRepeticao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEVOLTA:
        case TROVAR:
        case ESCUITAR:
        case FIM_LINHA:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          linha();
          fimBlocoRepeticao();
          break;
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
          bloco();
          fimBlocoRepeticao();
          break;
        case BAH:
          bah();
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "fimBlocoRepeticao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioSe() throws ParseException {
 /*@bgen(jjtree) inicioSe */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.inicioSe;
    try {
      try {
        se();
        expressao();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DAI:
          seDeUmaLinha();
          break;
        case TCHE:
          tche();
          fimLinha();
          blocoSe();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioSe");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void seDeUmaLinha() throws ParseException {
 /*@bgen(jjtree) seDeUmaLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTSEDEUMALINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.seDeUmaLinha;
    try {
      try {
        dai();
        elementoDeLinha();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIM_LINHA:
          fimLinha();
          break;
        case SENAO:
          senao();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DAI:
            dai();
            break;
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          linha();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "seDeUmaLinha");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void blocoSe() throws ParseException {
 /*@bgen(jjtree) blocoSe */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.blocoSe;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEVOLTA:
        case TROVAR:
        case ESCUITAR:
        case FIM_LINHA:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          linha();
          blocoSe();
          break;
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
          bloco();
          blocoSe();
          break;
        case BAH:
          bah();
          break;
        case SENAO:
          inicioSenao();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "blocoSe");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioSenao() throws ParseException {
 /*@bgen(jjtree) inicioSenao */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.inicioSenao;
    try {
      try {
        senao();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SE:
          inicioSe();
          break;
        case TCHE:
          tche();
          fimLinha();
          fimBlocoSenao();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "inicioSenao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimBlocoSenao() throws ParseException {
 /*@bgen(jjtree) fimBlocoSenao */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCOSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.fimBlocoSenao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEVOLTA:
        case TROVAR:
        case ESCUITAR:
        case FIM_LINHA:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          linha();
          fimBlocoSenao();
          break;
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
          bloco();
          fimBlocoSenao();
          break;
        case BAH:
          bah();
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "fimBlocoSenao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void definicaoDeFuncao() throws ParseException {
 /*@bgen(jjtree) definicaoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINICAODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.definicaoDeFuncao;
    try {
      try {
        funcao();
        tipoDeRetorno();
        nomeFuncao();
        abreParentese();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
          definicaoDeParametros();
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        fechaParentese();
        meioDeFuncao();
      } catch (ParseException e) {
    consumeUntil(recovery, e, "definicaoDeFuncao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoDeRetorno() throws ParseException {
 /*@bgen(jjtree) tipoDeRetorno */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODERETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.tipoDeRetorno;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAZIO:
          vazio();
          break;
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
          tipoDeDado();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "tipoDeRetorno");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void definicaoDeParametros() throws ParseException {
 /*@bgen(jjtree) definicaoDeParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINICAODEPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.definicaoDeParametros;
    try {
      try {
        tipoDeDado();
        nomeVariavel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          lacoDeAtribuicao();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          virgula();
          definicaoDeParametros();
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "definicaoDeParametros");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void meioDeFuncao() throws ParseException {
 /*@bgen(jjtree) meioDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.meioDeFuncao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DAI:
          dai();
          linha();
          break;
        case TCHE:
          tche();
          fimLinha();
          blocoDeFuncao();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "meioDeFuncao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void blocoDeFuncao() throws ParseException {
 /*@bgen(jjtree) blocoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet recovery = Follow.blocoDeFuncao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEVOLTA:
        case TROVAR:
        case ESCUITAR:
        case FIM_LINHA:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          linha();
          blocoDeFuncao();
          break;
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
          bloco();
          blocoDeFuncao();
          break;
        case BAH:
          bah();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(recovery, e, "blocoDeFuncao");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LexerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x78000000,0x78000000,0x800001,0x180,0x180,0x10000000,0x10000000,0x68000000,0x1f80,0x400000,0x3fdf80,0x180,0x3fdf80,0x1f80,0xfc000,0x300000,0x0,0x2000,0x0,0x400180,0x0,0x0,0x0,0x5000000,0x7a000000,0x5000000,0x4000000,0x0,0x7a000000,0x1000000,0x7a000000,0x0,0x0,0x2000,0x0,0x5000000,0x7a000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x19e3a,0x19e3a,0x0,0x0,0x0,0x19e18,0x19e18,0x2,0x0,0x0,0x0,0x51c090,0x0,0x0,0x0,0x0,0x1e00,0x0,0x40,0x51c090,0x40,0x18,0x400000,0x0,0x19e3a,0x0,0x0,0x24,0x19e3e,0x2,0x19e3a,0x1e00,0x3e00,0x0,0x40,0x0,0x19e3a,};
   }

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
