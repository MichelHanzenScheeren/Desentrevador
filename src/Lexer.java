/* Generated By:JJTree&JavaCC: Do not edit this line. Lexer.java */
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileInputStream;
import java.util.Scanner;

public class Lexer/*@bgen(jjtree)*/implements LexerTreeConstants, LexerConstants {/*@bgen(jjtree)*/
  protected static JJTLexerState jjtree = new JJTLexerState();public static void execute(Lexer analisador) throws ParseException {
                SimpleNode node = analisador.main();
                node.dump("->");
                System.out.println("\u005cn --------------------");
            System.out.println(" Mas ah indio veio!");
            System.out.println(" --------------------");
        }

        public static void main(String[] args) {
        try {
            if(args.length == 0) {
                    System.out.println("\u005cnInforme seu codigo: ");
                    execute(new Lexer(System.in));
                } else if(args[0].contains("-f")) {
                    System.out.println("\u005cnSelecione o arquivo do programa: ");
                        JFileChooser arquivo = new JFileChooser();
                        arquivo.showOpenDialog(null);
                        File selected = arquivo.getSelectedFile();
                        if(selected != null) {
                                FileInputStream stream = new FileInputStream(selected.getAbsolutePath());
                                execute(new Lexer(stream));
                        } else {
                          System.out.println("\u005cn\u005cn------------------------------------");
                          System.out.println("Processo cancelado pelo usuario!");
                          System.out.println("--------------------------------");
                          return;
                        }
                } else {
                        FileInputStream stream = new FileInputStream(args[0]);
                        execute(new Lexer(stream));
                }
        } catch (Throwable e) {
            System.out.println("Programa invalido!\u005cn " + e.getMessage());
        }
    }

  static final public SimpleNode main() throws ParseException {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIM_LINHA:
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
        case TROVAR:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIM_LINHA:
        case TROVAR:
        case REDONDO:
        case QUEBRADO:
        case TROVA:
        case LOGICO:
        case NOME_VARIAVEL:
        case NOME_FUNCAO:
          linha();
          break;
        case FUNCAO:
        case LOQUEANDO:
        case REPETECO:
        case SE:
          bloco();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_PROGRAMA:
        fimDePrograma();
        break;
      case 0:
        fimDeArquivo();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* OPERADORES */
  static final public void mais() throws ParseException {
 /*@bgen(jjtree) mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menos() throws ParseException {
 /*@bgen(jjtree) menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void vezes() throws ParseException {
 /*@bgen(jjtree) vezes */
  SimpleNode jjtn000 = new SimpleNode(JJTVEZES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VEZES);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void dividido() throws ParseException {
 /*@bgen(jjtree) dividido */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIVIDIDO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void elevado() throws ParseException {
 /*@bgen(jjtree) elevado */
  SimpleNode jjtn000 = new SimpleNode(JJTELEVADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELEVADO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void maior() throws ParseException {
 /*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menor() throws ParseException {
 /*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void maiorIgual() throws ParseException {
 /*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR_IGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menorIgual() throws ParseException {
 /*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR_IGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void igual() throws ParseException {
 /*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void diferente() throws ParseException {
 /*@bgen(jjtree) diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFERENTE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ou() throws ParseException {
 /*@bgen(jjtree) ou */
  SimpleNode jjtn000 = new SimpleNode(JJTOU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OU);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void e() throws ParseException {
 /*@bgen(jjtree) e */
  SimpleNode jjtn000 = new SimpleNode(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(E);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* PALAVRAS RESERVADAS */
  static final public void loqueando() throws ParseException {
 /*@bgen(jjtree) loqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOQUEANDO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void repeteco() throws ParseException {
 /*@bgen(jjtree) repeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPETECO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioBloco() throws ParseException {
 /*@bgen(jjtree) inicioBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIO_BLOCO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimBloco() throws ParseException {
 /*@bgen(jjtree) fimBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_BLOCO);
      jj_consume_token(FIM_LINHA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioOperacaoLinha() throws ParseException {
 /*@bgen(jjtree) inicioOperacaoLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOOPERACAOLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIO_OPERACAO_LINHA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimOperacaoLinha() throws ParseException {
 /*@bgen(jjtree) fimOperacaoLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMOPERACAOLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_OPERACAO_LINHA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void minRepeteco() throws ParseException {
 /*@bgen(jjtree) minRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTMINREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MIN_REPETECO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void maxRepeteco() throws ParseException {
 /*@bgen(jjtree) maxRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTMAXREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAX_REPETECO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void se() throws ParseException {
 /*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void senao() throws ParseException {
 /*@bgen(jjtree) senao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SENAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcao() throws ParseException {
 /*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void trovar() throws ParseException {
 /*@bgen(jjtree) trovar */
  SimpleNode jjtn000 = new SimpleNode(JJTTROVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TROVAR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimDeArquivo() throws ParseException {
 /*@bgen(jjtree) fimDeArquivo */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMDEARQUIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimDePrograma() throws ParseException {
 /*@bgen(jjtree) fimDePrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMDEPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_PROGRAMA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* SIMBOLOS */
  static final public void simboloAtribuicao() throws ParseException {
 /*@bgen(jjtree) simboloAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMBOLOATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATRIBUICAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void abreParentese() throws ParseException {
 /*@bgen(jjtree) abreParentese */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRE_PARENTESE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fechaParentese() throws ParseException {
 /*@bgen(jjtree) fechaParentese */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHA_PARENTESE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimLinha() throws ParseException {
 /*@bgen(jjtree) fimLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_LINHA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void virgula() throws ParseException {
 /*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VIRGULA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* IDENTIFICADORES: */
  static final public void nomeVariavel() throws ParseException {
 /*@bgen(jjtree) nomeVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOME_VARIAVEL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void nomeFuncao() throws ParseException {
 /*@bgen(jjtree) nomeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOME_FUNCAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void texto() throws ParseException {
 /*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TEXTO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void numeroComSinal() throws ParseException {
 /*@bgen(jjtree) numeroComSinal */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMEROCOMSINAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
      case MENOS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
          mais();
          break;
        case MENOS:
          menos();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(NUMERO);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void booleano() throws ParseException {
 /*@bgen(jjtree) booleano */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEANO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* TIPOS DE DADO */
  static final public void redondo() throws ParseException {
 /*@bgen(jjtree) redondo */
  SimpleNode jjtn000 = new SimpleNode(JJTREDONDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REDONDO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void quebrado() throws ParseException {
 /*@bgen(jjtree) quebrado */
  SimpleNode jjtn000 = new SimpleNode(JJTQUEBRADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(QUEBRADO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void trova() throws ParseException {
 /*@bgen(jjtree) trova */
  SimpleNode jjtn000 = new SimpleNode(JJTTROVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TROVA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void logico() throws ParseException {
 /*@bgen(jjtree) logico */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOGICO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void vazio() throws ParseException {
 /*@bgen(jjtree) vazio */
  SimpleNode jjtn000 = new SimpleNode(JJTVAZIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAZIO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* INICIO DA ANALISE SINTATICA */
  static final public void linha() throws ParseException {
 /*@bgen(jjtree) linha */
  SimpleNode jjtn000 = new SimpleNode(JJTLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TROVAR:
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
      case NOME_VARIAVEL:
      case NOME_FUNCAO:
        elementoDeLinha();
        fimLinha();
        break;
      case FIM_LINHA:
        fimLinha();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void elementoDeLinha() throws ParseException {
 /*@bgen(jjtree) elementoDeLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENTODELINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOME_VARIAVEL:
        atribuicao();
        break;
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
        declaracaoDeVariavel();
        break;
      case NOME_FUNCAO:
        chamadaDeFuncao();
        break;
      case TROVAR:
        funcaoTrovar();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void atribuicao() throws ParseException {
 /*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nomeVariavel();
      lacoDeAtribuicao();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lacoDeAtribuicao() throws ParseException {
 /*@bgen(jjtree) lacoDeAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTLACODEATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      simboloAtribuicao();
      expressaoMatematica();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expressaoMatematica() throws ParseException {
 /*@bgen(jjtree) expressaoMatematica */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOMATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expressaoLogica();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
        case VEZES:
        case DIVIDIDO:
        case ELEVADO:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        operadorMatematico();
        expressaoLogica();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expressaoLogica() throws ParseException {
 /*@bgen(jjtree) expressaoLogica */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      atribuivel();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case DIFERENTE:
        case MAIOR:
        case MENOR:
        case MAIOR_IGUAL:
        case MENOR_IGUAL:
        case OU:
        case E:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        operadorLogico();
        atribuivel();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void atribuivel() throws ParseException {
 /*@bgen(jjtree) atribuivel */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        expressaoEntreParenteses();
        break;
      case MAIS:
      case MENOS:
      case NUMERO:
        numeroComSinal();
        break;
      case NOME_VARIAVEL:
        nomeVariavel();
        break;
      case TEXTO:
        texto();
        break;
      case BOOLEANO:
        booleano();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expressaoEntreParenteses() throws ParseException {
 /*@bgen(jjtree) expressaoEntreParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOENTREPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      abreParentese();
      expressaoMatematica();
      fechaParentese();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorMatematico() throws ParseException {
 /*@bgen(jjtree) operadorMatematico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMATEMATICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
        mais();
        break;
      case MENOS:
        menos();
        break;
      case VEZES:
        vezes();
        break;
      case DIVIDIDO:
        dividido();
        break;
      case ELEVADO:
        elevado();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorLogico() throws ParseException {
 /*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
        maior();
        break;
      case MENOR:
        menor();
        break;
      case MAIOR_IGUAL:
        maiorIgual();
        break;
      case MENOR_IGUAL:
        menorIgual();
        break;
      case IGUAL:
        igual();
        break;
      case DIFERENTE:
        diferente();
        break;
      case OU:
        ou();
        break;
      case E:
        e();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void declaracaoDeVariavel() throws ParseException {
 /*@bgen(jjtree) declaracaoDeVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAODEVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tipoDeDado();
      listaDeDeclaracao();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void tipoDeDado() throws ParseException {
 /*@bgen(jjtree) tipoDeDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODEDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REDONDO:
        redondo();
        break;
      case QUEBRADO:
        quebrado();
        break;
      case TROVA:
        trova();
        break;
      case LOGICO:
        logico();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listaDeDeclaracao() throws ParseException {
 /*@bgen(jjtree) listaDeDeclaracao */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADEDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nomeVariavel();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        lacoDeAtribuicao();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_4;
        }
        virgula();
        nomeVariavel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          lacoDeAtribuicao();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bloco() throws ParseException {
 /*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOQUEANDO:
        inicioDoLoqueando();
        break;
      case REPETECO:
        inicioDoRepeteco();
        break;
      case SE:
        inicioSe();
        break;
      case FUNCAO:
        definicaoDeFuncao();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioDoLoqueando() throws ParseException {
 /*@bgen(jjtree) inicioDoLoqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIODOLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      loqueando();
      expressaoMatematica();
      meioDoLoqueando();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void meioDoLoqueando() throws ParseException {
 /*@bgen(jjtree) meioDoLoqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIODOLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_OPERACAO_LINHA:
        inicioOperacaoLinha();
        linha();
        break;
      case INICIO_BLOCO:
        inicioBloco();
        fimLinha();
        blocoDoLoqueando();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void blocoDoLoqueando() throws ParseException {
 /*@bgen(jjtree) blocoDoLoqueando */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCODOLOQUEANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_LINHA:
      case TROVAR:
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
      case NOME_VARIAVEL:
      case NOME_FUNCAO:
        linha();
        blocoDoLoqueando();
        break;
      case FUNCAO:
      case LOQUEANDO:
      case REPETECO:
      case SE:
        bloco();
        blocoDoLoqueando();
        break;
      case FIM_BLOCO:
        fimBloco();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioDoRepeteco() throws ParseException {
 /*@bgen(jjtree) inicioDoRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIODOREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      repeteco();
      nomeVariavel();
      minRepeteco();
      expressaoMatematica();
      maxRepeteco();
      expressaoMatematica();
      meioDoRepeteco();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void meioDoRepeteco() throws ParseException {
 /*@bgen(jjtree) meioDoRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIODOREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_OPERACAO_LINHA:
        inicioOperacaoLinha();
        linha();
        break;
      case INICIO_BLOCO:
        inicioBloco();
        fimLinha();
        blocoDoRepeteco();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void blocoDoRepeteco() throws ParseException {
 /*@bgen(jjtree) blocoDoRepeteco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCODOREPETECO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_LINHA:
      case TROVAR:
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
      case NOME_VARIAVEL:
      case NOME_FUNCAO:
        linha();
        blocoDoRepeteco();
        break;
      case FUNCAO:
      case LOQUEANDO:
      case REPETECO:
      case SE:
        bloco();
        blocoDoRepeteco();
        break;
      case FIM_BLOCO:
        fimBloco();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioSe() throws ParseException {
 /*@bgen(jjtree) inicioSe */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      se();
      expressaoMatematica();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_OPERACAO_LINHA:
        seDeUmaLinha();
        break;
      case INICIO_BLOCO:
        inicioBloco();
        fimLinha();
        blocoSe();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void seDeUmaLinha() throws ParseException {
 /*@bgen(jjtree) seDeUmaLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTSEDEUMALINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      inicioOperacaoLinha();
      elementoDeLinha();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_LINHA:
        fimLinha();
        break;
      case SENAO:
        senao();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INICIO_OPERACAO_LINHA:
          inicioOperacaoLinha();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        linha();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void blocoSe() throws ParseException {
 /*@bgen(jjtree) blocoSe */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_LINHA:
      case TROVAR:
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
      case NOME_VARIAVEL:
      case NOME_FUNCAO:
        linha();
        blocoSe();
        break;
      case FUNCAO:
      case LOQUEANDO:
      case REPETECO:
      case SE:
        bloco();
        blocoSe();
        break;
      case FIM_BLOCO:
        fimBloco();
        break;
      case SENAO:
        inicioSenao();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inicioSenao() throws ParseException {
 /*@bgen(jjtree) inicioSenao */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      senao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SE:
        inicioSe();
        break;
      case INICIO_OPERACAO_LINHA:
        inicioOperacaoLinha();
        linha();
        break;
      case INICIO_BLOCO:
        inicioBloco();
        fimLinha();
        fimBlocoSenao();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fimBlocoSenao() throws ParseException {
 /*@bgen(jjtree) fimBlocoSenao */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCOSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_LINHA:
      case TROVAR:
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
      case NOME_VARIAVEL:
      case NOME_FUNCAO:
        linha();
        fimBlocoSenao();
        break;
      case FUNCAO:
      case LOQUEANDO:
      case REPETECO:
      case SE:
        bloco();
        fimBlocoSenao();
        break;
      case FIM_BLOCO:
        fimBloco();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void definicaoDeFuncao() throws ParseException {
 /*@bgen(jjtree) definicaoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINICAODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      funcao();
      tipoDeRetorno();
      nomeFuncao();
      abreParentese();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
        definicaoDeParametros();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      fechaParentese();
      meioDeFuncao();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoDeRetorno() throws ParseException {
 /*@bgen(jjtree) tipoDeRetorno */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODERETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAZIO:
        vazio();
        break;
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
        tipoDeDado();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void definicaoDeParametros() throws ParseException {
 /*@bgen(jjtree) definicaoDeParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINICAODEPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tipoDeDado();
      nomeVariavel();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        lacoDeAtribuicao();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_5;
        }
        virgula();
        tipoDeDado();
        nomeVariavel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          lacoDeAtribuicao();
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void meioDeFuncao() throws ParseException {
 /*@bgen(jjtree) meioDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTMEIODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO_OPERACAO_LINHA:
        inicioOperacaoLinha();
        linha();
        break;
      case INICIO_BLOCO:
        inicioBloco();
        fimLinha();
        blocoDeFuncao();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void blocoDeFuncao() throws ParseException {
 /*@bgen(jjtree) blocoDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCODEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM_LINHA:
      case TROVAR:
      case REDONDO:
      case QUEBRADO:
      case TROVA:
      case LOGICO:
      case NOME_VARIAVEL:
      case NOME_FUNCAO:
        linha();
        blocoDeFuncao();
        break;
      case FUNCAO:
      case LOQUEANDO:
      case REPETECO:
      case SE:
        bloco();
        blocoDeFuncao();
        break;
      case FIM_BLOCO:
        fimBloco();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void chamadaDeFuncao() throws ParseException {
 /*@bgen(jjtree) chamadaDeFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMADADEFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nomeFuncao();
      abreParentese();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
      case MENOS:
      case ABRE_PARENTESE:
      case BOOLEANO:
      case NOME_VARIAVEL:
      case NUMERO:
      case TEXTO:
        passagemDeParametros();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      fechaParentese();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void passagemDeParametros() throws ParseException {
 /*@bgen(jjtree) passagemDeParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTPASSAGEMDEPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      parametrosAtribuiveis();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_6;
        }
        virgula();
        parametrosAtribuiveis();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parametrosAtribuiveis() throws ParseException {
 /*@bgen(jjtree) parametrosAtribuiveis */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSATRIBUIVEIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESE:
        expressaoEntreParenteses();
        break;
      case MAIS:
      case MENOS:
      case NUMERO:
        numeroComSinal();
        break;
      case NOME_VARIAVEL:
        nomeVariavel();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          lacoDeAtribuicao();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
      case TEXTO:
        texto();
        break;
      case BOOLEANO:
        booleano();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcaoTrovar() throws ParseException {
 /*@bgen(jjtree) funcaoTrovar */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAOTROVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      trovar();
      abreParentese();
      expressaoMatematica();
      fechaParentese();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LexerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x41000000,0x41000000,0x800001,0x600,0x600,0x1000000,0x0,0x3e00,0x7f8000,0x80000600,0x3e00,0x7f8000,0x0,0x4000,0x2000000,0x4000,0x40000000,0x14000000,0x49000000,0x14000000,0x49000000,0x14000000,0x10000000,0x1000000,0x49000000,0x14000000,0x49000000,0x0,0x0,0x4000,0x2000000,0x4000,0x14000000,0x49000000,0x80000600,0x2000000,0x4000,0x80000600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xcfa6,0xcfa6,0x0,0x0,0x0,0xcf80,0xcf80,0x0,0x0,0x286000,0x0,0x0,0xf00,0x0,0x0,0x0,0x26,0x0,0xcfa6,0x0,0xcfa6,0x0,0x0,0x40,0xcfe6,0x20,0xcfa6,0xf00,0x1f00,0x0,0x0,0x0,0x0,0xcfa6,0x286000,0x0,0x0,0x286000,};
   }

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
