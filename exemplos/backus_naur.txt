/* TOKENS */
<booleano> ::= "causo" | "anedota"
<nomeVariavel> > ::= (<minusculas> | "_") (<letra> | <digito> | "_")*
<nomeFuncao> ::= <maiusculas> (<letra> | <digito> | "_")*
<letra> ::= <minusculas> | <maiusculas>
<minusculas> ::= ["a" - "z"]
<maiusculas> ::= ["A" - "Z"]
<numero> ::= (<digito>)+("."(<digito>)+)?
<numeroComSinal> ::= ("+" | "-")? <numero>
<digito> ::= ["0" - "9"]
<texto> ::= ('"' ((~["\"","\\","\n","\r"]) | < ascii >)* '"') | ("'" ((~["'","\\","\n","\r"]) | < ascii >)* "'")
<ascii> ::= ("\\" ( ["n","t","b","r","f","\\","'","\""] | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))


/* REGRAS SINTATICAS */
<S> ::= (<linha> | <bloco>)* ("pareHome" | "EOF")
<linha> ::= (<elementoDeLinha>)? "\n"  
<elementoDeLinha> ::= <atribuicao> | <declaracaoDeVariavel> | <chamadaDeFuncao> | <funcoesNativas>
<bloco> ::= <inicioDoLoqueando> | <inicioDoRepeteco> | <inicioSe> | <definicaoDeFuncao>

// LINHA
<atribuicao> ::= <nomeVariavel> (<operadorMatematico>)? <lacoDeAtribuicao>
<lacoDeAtribuicao> ::= "=" <expressao>
<expressao> ::= ("!")? <atribuivel> (<operador><expressao>)?
<atribuivel> ::= "("<expressao>")" | <numeroComSinal> | <texto> | <booleano> | <nomeVariavel> 
                | <chamadaDeFuncao> | <funcaoEscuitar>
<operador> ::= <operadorMatematico> | <operadorLogico> | <conectorLogico>
<operadorMatematico> ::= "+" | "-" | "*" | "/" | "^" | "%"
<operadorLogico> ::= ">" | "<" | ">=" | "<=" | "==" | "!=" 
<conectorLogico> ::= "e" | "ou"

<expressaoMatematica> ::= <atribuivelMatematico><lacoMatematico>
<lacoMatematico> ::= <operadorMatematico><expressaoMatematica> | &
<atribuivelMatematico> ::= "("<expressaoMatematica>")" | <numeroComSinal> | <texto> | <nomeVariavel> 
                        | <chamadaDeFuncao> | <funcaoEscuitar>

<expressaoLogica> ::= ("!")? (<expressaoLogicaEntreParenteses> | <booleano><lacoLogico> | <verificacaoDeNome> 
                    | <primitivosLogicos><lacoMatematico><ligacaoLogica>)
<expressaoLogicaEntreParenteses> ::= "("<expressaoLogica>")"<lacoLogico>
<lacoLogico> ::= <conectorLogico><expressaoLogica> | &
<verificacaoDeNome> ::= (<nomeVariavel> | <chamadaDeFuncao>) <opcoesNome>
<opcoesNome> ::= <operadorMatematico><expressaoMatematica><ligacaoLogica> | <ligacaoLogica> | <lacoLogico> 
<ligacaoLogica> ::= <operadorLogico><expressaoMatematica><lacoLogico>
<primitivosLogicos> ::= <numeroComSinal> | <texto> | <funcaoEscuitar>

<declaracaoDeVariavel> ::=  <tipoDeDado><listaDeDeclaracao>
<tipoDeDado> ::= "redondo" | "quebrado" | "trova" | "logico"
<listaDeDeclaracao> ::= <nomeVariavel> (<lacoDeAtribuicao>)?  (","<listaDeDeclaracao>)?

<chamadaDeFuncao> ::= <nomeFuncao> "(" (<passagemDeParametros>)? ")"
<passagemDeParametros> ::= <expressao> (","<passagemDeParametros>)?

<funcoesNativas> ::= <funcaoTrovar> | <funcaoEscuitar>
<funcaoTrovar> ::= "Trovar" "(" <expressao> ")"
<funcaoEscuitar> ::= "Escuitar" "(" (<texto>)? ")"

// BLOCO
<inicioDoLoqueando> ::= "loqueando"<expressaoLogica><meioBlocoRepeticao>
<inicioDoRepeteco> ::= "repeteco"<nomeVariavel>"de"<expressaoMatematica>"ate"<expressaoMatematica><meioBlocoRepeticao>
<meioBlocoRepeticao> ::= "dai"<linha> | "tche""\n"<fimBlocoRepeticao>
<fimBlocoRepeticao> ::= <linha><fimBlocoRepeticao> | <bloco><fimBlocoRepeticao> | "bah""\n"

<inicioSe> ::= "se"<expressaoLogica> (<seDeUmaLinha> | "tche""\n"<blocoSe>)
<seDeUmaLinha> ::= "dai"<elementoDeLinha> ("\n" | "senao" ("dai")? <linha>)
<blocoSe> ::= <linha><blocoSe> | <bloco><blocoSe> | "bah""\n" | <inicioSenao>
<inicioSenao> ::= "senao"<inicioSe> | "senao""tche""\n"<fimBlocoSenao>
<fimBlocoSenao> ::= <linha><fimBlocoSenao> | <bloco><fimBlocoSenao> | "bah""\n"

<definicaoDeFuncao> ::= "funcao" <tipoDeRetorno> <nomeFuncao> "(" (<definicaoParametros>)? ")" <meioDeFuncao>
<tipoDeRetorno> ::= "vazio" | <tipoDeDado>
<definicaoParametros> ::= <tipoDeDado> <nomeVariavel> (<lacoDeAtribuicao>)? ("," <definicaoDeParametros>)?
<meioDeFuncao> ::= "dai"<funcaoDeLinha> | "tche""\n"<blocoFuncao>
<funcaoDeLinha> ::= <linha> | "devolta"<expressao>
<blocoFuncao> ::= <linha><blocoFuncao> | <bloco><blocoFuncao> | <retornoDeFuncao> |  "bah""\n"
<retornoDeFuncao> ::= "devolta" <expressao> "\n" "bah" "\n"
